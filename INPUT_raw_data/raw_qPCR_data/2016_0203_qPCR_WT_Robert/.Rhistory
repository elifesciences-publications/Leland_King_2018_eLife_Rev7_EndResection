tmp <- read.xlsx(str_c(xlsx.dir,files.qpcr["melt.peaks"]),1)
summary.info <- merge(summary.info,tmp[c("Well","Melt.Temperature","Peak.Height","Begin.Temperature","End.Temperature")])
# rename all of the columns of this data.frame:
names(summary.info) <- c("well","fluor","Cq","end.RFU","melt.temp","melt.height","melt.begin","melt.end")
# Some columns with strings like "None" have been interpreted as factors
# when actually they should be numeric with "None" replaced with NA.
# Use the function from above to coerce these columns into numeric w/ NA
cols.to.make.numeric <- c("Cq","end.RFU","melt.temp","melt.height","melt.begin","melt.end")
summary.info <- coerce_factor_to_numeric(summary.info,cols.to.make.numeric)
# ensure that there are padded zeros in the "well" column:
summary.info$well <- pad_zeros_factor(summary.info$well)
# merge the well info into the summary data
qp$summary <- merge(well.info,summary.info,by="well")
# re-order values in a way that makes sense:
qp$summary <- qp$summary[c.summary.col.order]
# Read and process raw qPCR data & melt curves ----------------------------
# this function will be used to manipulate all raw qPCR data into data.frames
# massage the data into a long format (just three columns: well, variable, value)
# then merge the data with qp.summary
raw_processing <- function(tmp,cols,summary.info) {
tmp <- tmp[,-1] # drop the empty first column
tmp <- t(tmp)   # transpose to swap rows/cols
# use the first row as the column names
colnames(tmp) <- as.character(tmp[1,])
tmp <- tmp[-1,] # now delete that first row
# add a new column at the left with well labels (row.names)
tmp <- cbind.data.frame(well = row.names(tmp), tmp) # converts to factor
# add padded zeros with the same function from before:
tmp$well <- pad_zeros_factor(tmp$well)
# use the "melt" function from the "reshape2" package to convert
# this from a "wide" dataset to a "long" dataset
tmp <- melt(tmp,id.vars="well")
# convert back to numeric for the middle column (called "variable" now)
tmp$variable <- as.numeric(levels(tmp$variable)[tmp$variable])
# Sort based on well, then variable:
tmp <- tmp[with(tmp, order(well,variable)), ]
rownames(tmp) <- NULL # remove all of the row names
# rename the columns:
colnames(tmp) <- cols
# merge with summary.info:
tmp <- merge(summary.info,tmp,by="well")
# re-order the columns with "well" first, then all the summary
# data, and then the two new columns from this dataset at the end
tmp <- tmp[c(c.summary.col.order,cols[2:3])]
return(tmp)
}
# raw qPCR amplification data
tmp <- read.xlsx(str_c(xlsx.dir,files.qpcr["quant.amp"]),1)
qp$cycle <- raw_processing(tmp,c("well","cycle","RFU"),qp$summary)
# raw melt curve amplification data
tmp <- read.xlsx(str_c(xlsx.dir,files.qpcr["melt.amp"]),1)
qp$melt <- raw_processing(tmp,c("well","temp","RFU"),qp$summary)
# merge in the raw melt curve derivative data to the same data.frame:
tmp <- read.xlsx(str_c(xlsx.dir,files.qpcr["melt.der"]),1)
melt.der <- raw_processing(tmp,c("well","temp","dRFU"),qp$summary)
qp$melt <- merge(qp$melt,melt.der)
# Return the qp list ------------------------------------------------------
return(qp)
}
?read_excel
qpcr_import <- function(xlsx.dir,well.info.file) {
# Constants ---------------------------------------------------------------
# files in the xlsx.dir that will be analyzed
c.file.list <- c("Quantification Summary","End Point Results","Melt Curve Peak Results",
"Quantification Amplification Results","Melt Curve Amplification Results","Melt Curve Derivative Results")
names(c.file.list) <- c("quant.sum","end.points","melt.peaks",
"quant.amp","melt.amp","melt.der")
c.file.type <- ".xlsx"
c.exclude.files <- "^~\\$"
# excepcted columns to find in the user-generated well.info.file .xlsx file:
c.expected.well.info <- c("well","strain","DNA","time","conc","digest","is.std","primers","rep")
# reordering of ALL columns once qp$summary is built
c.summary.col.order <- c("well","fluor","is.empty","is.noDNA","is.std","strain","DNA","time","conc","digest","primers","rep","melt.begin","melt.end","melt.temp","melt.height","end.RFU","Cq")
# initialize the FINAL output, a list called "qp"
qp <- list()
# Find and validate qPCR files --------------------------------------------
# prune off excluded files (temp excel files, etc)
files.all  <- dir(path = xlsx.dir)
files.keep <- files.all[!str_detect(files.all,c.exclude.files)]
# patterns that we will look for in these files:
patterns <- str_c(c.file.list,c.file.type)
names(patterns) <- names(c.file.list) # copy over the same names
# Find which files contain which one of the patterns (makes a matrix that
# is [length(all.files),length(patterns)])
idx.matrix <- outer(files.keep,patterns,str_count)
# verifications (must match ALL patterns exactly 1 time)
if (  any(colSums(idx.matrix) != 1) | any(rowSums(idx.matrix) > 1)  ) {
stop(sprintf("Could not match ALL apporpriate \"%s\" files exactly once in the folder: \n\"%s\"",c.file.type,xlsx.dir))
}
# make a char vector of all the file names in the same order as "c.file.list"
ind.files.keep <- apply(idx.matrix, 2, function(x)which(x==1))
files.qpcr <- files.keep[ind.files.keep]
names(files.qpcr) <- names(ind.files.keep) # copy over the same names
# Read and validate user-generated well info ------------------------------
tmp <- read_excel(str_c(xlsx.dir,well.info.file),sheet = 1)
# verify that ONLY the specified col names are present!
if (  length(setdiff(c.expected.well.info,names(tmp)) != 0)  ) {
stop(sprintf("The column names in \"%s\" must be:\n\"%s\"",well.info.file,str_c(c.expected.well.info,collapse="\",\"")))
}
# this function converts specific columns from "factor" to "numeric"
#   x is a data.frame
#   cols is a list of column names to operate on
# all values that are not numeric in these columns will be coerced
# to NA (for example, "None" will change to NA)
coerce_factor_to_numeric <- function(x,cols) {
idx.not.numeric <- lapply(x,class) == "factor"  &  is.element(names(x),cols)
x[idx.not.numeric] <- suppressWarnings(  sapply(x[idx.not.numeric],function(y) as.numeric(levels(y)[y]))  )
return(x)
}
# use this function to ensure that these columns are numeric:
well.info <- coerce_factor_to_numeric(tmp,c("time","conc"))
# this function will take a "factor", convert to str/num,
# pad with zeros, then convert back to "factor" (useful
# for making sure that sorting works correctly)
pad_zeros_factor <- function(x) {
# split the letter and the numbers into two columns
x.split <- str_extract_all(x,"[^\\d\\s]+|\\d+",simplify=TRUE)
x.split <- as.data.frame(x.split, stringsAsFactors = FALSE)
# second column has number. Pad with zeros:
x.split[,2] <- as.numeric(x.split[,2])      # convert to numeric
x.dig <- floor(log10(max(x.split[,2]))) + 1 # find digits in max value
x.split[,2] <- str_pad(x.split[,2],width=x.dig,pad="0")     # use str_pad to pad with zeros basded on digits
# join the letter and numbers back together
x <- str_c(x.split[,1],x.split[,2])
x <- as.factor(x)
return(x)
}
# use this function to ensure that the well column is padded with zeros:
well.info$well <- pad_zeros_factor(well.info$well)
# coerce the "rep" column to factor
well.info$rep <- as.factor(well.info$rep)
# ensure that these columns are logical:
cols.logical <- c("is.std")
cols.classes <- sapply(well.info[cols.logical],class)
# convert any numeric to logical
for (i in which(cols.classes == "numeric")) {
well.info[cols.logical[i]] <- as.logical(well.info[cols.logical[i]])
cols.classes[i] <- "logical"
}
# verify that ALL are now logical
if ( any(cols.classes != "logical") ) {
stop(sprintf("The columns \"%s\" must be logical\n(use \"TRUE\" and \"FALSE\" or 0s and 1s)",str_c(cols,collapse="\",\"")))
}
# make a new column indicating no DNA negative control wells (using %in%
# instead of == effectively ignores NA values!)
well.info$is.noDNA <- well.info$conc %in% 0
# make a new column indicating empty wells (based on the
# presense of all NA values in these columns):
cols.empty <- c("strain","DNA","time","conc","digest","primers","rep")
idx.empty.rows <- apply(well.info[,cols.empty], 1, function(x) all(is.na(x)) )
# replace NA with FALSE for empty rows for logical columns:
well.info[idx.empty.rows,cols.logical] <- FALSE
# make a new column called "is.empty"
well.info$is.empty <- idx.empty.rows
# now, verify that there are NO NA values anywhere in the data.frame
# EXCEPT for in the rows that are empty wells or have no DNA
if ( any(is.na(  well.info[!well.info$is.noDNA & !well.info$is.empty , ]  )) ) {
stop("There cannot be any NA (empty) values in the user-generated well info .xlsx except for totally empty wells")
}
# Read and process qPCR summary data --------------------------------------
# get summary of run information from "quant.sum" (in the 2nd excel sheet!!)
qp$run.info <- read_excel(str_c(xlsx.dir,files.qpcr["quant.sum"]), sheet=2, col_names=FALSE)
# get well, fluor and Cq values from "quant.sum" (in the 1st excel sheet!!)
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["quant.sum"]),sheet=1)
summary.info <- tmp[c("Well","Fluor","Cq")]
# add a column for the end.rfu (from "end.points", 1st excel sheet)
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["end.points"]),sheet=1)
summary.info <- merge(summary.info,tmp[c("Well","End.RFU")])
# add columns related to the melt curve peaks (from "melt.peaks", 1st excel sheet)
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["melt.peaks"]),sheet=1)
summary.info <- merge(summary.info,tmp[c("Well","Melt.Temperature","Peak.Height","Begin.Temperature","End.Temperature")])
# rename all of the columns of this data.frame:
names(summary.info) <- c("well","fluor","Cq","end.RFU","melt.temp","melt.height","melt.begin","melt.end")
# Some columns with strings like "None" have been interpreted as factors
# when actually they should be numeric with "None" replaced with NA.
# Use the function from above to coerce these columns into numeric w/ NA
cols.to.make.numeric <- c("Cq","end.RFU","melt.temp","melt.height","melt.begin","melt.end")
summary.info <- coerce_factor_to_numeric(summary.info,cols.to.make.numeric)
# ensure that there are padded zeros in the "well" column:
summary.info$well <- pad_zeros_factor(summary.info$well)
# merge the well info into the summary data
qp$summary <- merge(well.info,summary.info,by="well")
# re-order values in a way that makes sense:
qp$summary <- qp$summary[c.summary.col.order]
# Read and process raw qPCR data & melt curves ----------------------------
# this function will be used to manipulate all raw qPCR data into data.frames
# massage the data into a long format (just three columns: well, variable, value)
# then merge the data with qp.summary
raw_processing <- function(tmp,cols,summary.info) {
tmp <- tmp[,-1] # drop the empty first column
tmp <- t(tmp)   # transpose to swap rows/cols
# use the first row as the column names
colnames(tmp) <- as.character(tmp[1,])
tmp <- tmp[-1,] # now delete that first row
# add a new column at the left with well labels (row.names)
tmp <- cbind.data.frame(well = row.names(tmp), tmp) # converts to factor
# add padded zeros with the same function from before:
tmp$well <- pad_zeros_factor(tmp$well)
# use the "melt" function from the "reshape2" package to convert
# this from a "wide" dataset to a "long" dataset
tmp <- melt(tmp,id.vars="well")
# convert back to numeric for the middle column (called "variable" now)
tmp$variable <- as.numeric(levels(tmp$variable)[tmp$variable])
# Sort based on well, then variable:
tmp <- tmp[with(tmp, order(well,variable)), ]
rownames(tmp) <- NULL # remove all of the row names
# rename the columns:
colnames(tmp) <- cols
# merge with summary.info:
tmp <- merge(summary.info,tmp,by="well")
# re-order the columns with "well" first, then all the summary
# data, and then the two new columns from this dataset at the end
tmp <- tmp[c(c.summary.col.order,cols[2:3])]
return(tmp)
}
# raw qPCR amplification data
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["quant.amp"]),sheet=1)
qp$cycle <- raw_processing(tmp,c("well","cycle","RFU"),qp$summary)
# raw melt curve amplification data
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["melt.amp"]),sheet=1)
qp$melt <- raw_processing(tmp,c("well","temp","RFU"),qp$summary)
# merge in the raw melt curve derivative data to the same data.frame:
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["melt.der"]),sheet=1)
melt.der <- raw_processing(tmp,c("well","temp","dRFU"),qp$summary)
qp$melt <- merge(qp$melt,melt.der)
# Return the qp list ------------------------------------------------------
return(qp)
}
pwd()
cd
cd()
dir()
qpcr_import("2016_0203_qPCR_WT_Robert/","2016_0203_qPCR_WT_Robert/2016_0203_well_info.xlsx"
)
qp <- qpcr_import("2016_0203_qPCR_WT_Robert/","2016_0203_qPCR_WT_Robert/2016_0203_well_info.xlsx")
getwd()
qp <- qpcr_import("2016_0203_qPCR_WT_Robert/","2016_0203_well_info.xlsx")
qp <- qpcr_import("2016_0203_qPCR_WT_Robert/","2016_0203_well_info.xlsx")
debugSource('~/Documents/Bryan_Docs/Yale/KingLab/qPCR_data/qPCR_analysis_v2.R', echo=TRUE)
qp <- qpcr_import("2016_0203_qPCR_WT_Robert/","2016_0203_well_info.xlsx")
tmp
tmp
qp <- qpcr_import("2016_0203_qPCR_WT_Robert/","2016_0203_well_info.xlsx")
well.info
cols.logical
sapply(well.info[cols.logical],class)
well.info[cols.logical[i]]
well.info
i
well.info[cols.logical[i]]
as.logical(well.info[cols.logical[i]])
as.logical(well.info[cols.logical[i]])
well.info[cols.logical[i]]
well.info[cols.logical[i]] %>% class
well.info
cols.classes
well.info[cols.logical[i]]
cols.classes
i
cols.logical[i]
well.info[cols.logical[i]]
well.info[,cols.logical[i]]
well.info[,cols.logical[i]] <- as.logical(well.info[,cols.logical[i]])
well.info
debugSource('~/Documents/Bryan_Docs/Yale/KingLab/qPCR_data/qPCR_analysis_v2.R', echo=TRUE)
debugSource('~/Documents/Bryan_Docs/Yale/KingLab/qPCR_data/qPCR_analysis_v2.R', echo=TRUE)
qp <- qpcr_import("2016_0203_qPCR_WT_Robert/","2016_0203_well_info.xlsx")
qp <- qpcr_import("2016_0203_qPCR_WT_Robert/","2016_0203_well_info.xlsx")
qp <- qpcr_import("2016_0203_qPCR_WT_Robert/","2016_0203_well_info.xlsx")
read_excel(str_c(xlsx.dir,files.qpcr["quant.sum"]))
read_excel(str_c(xlsx.dir,files.qpcr["quant.sum"]),1)
read_excel(str_c(xlsx.dir,files.qpcr["quant.sum"]))
read_excel(str_c(xlsx.dir,files.qpcr["quant.sum"]))
read_excel("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  End Point Results.xlsx")
?excel_sheets
excel_sheets("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  End Point Results.xlsx")
excel_sheets("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  End Point Results.xlsx")
excel_sheets("20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
excel_sheets("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx
)
)
excel_sheets("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
excel_sheets("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
read_excel("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
sessionInfo()
update.packages("readxl")
read_excel("2016_0203_qPCR_WT_Robert/2016_0203_well_info.xlsx")
read_excel("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xls")
read_excel("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
read_excel("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xls")
read_excel("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
getwd()
read_excel("2016_0203_qPCR_WT_Robert/2016_0203_well_info.xlsx")
read_excel("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
?read_excel
read_excel("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xls")
read_excel("/2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xls")
read_excel("2016_0203_qPCR_WT_Robert/20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xls")
setwd("2016_0203_qPCR_WT_Robert/")
getwd
getwd()
read_excel("20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
setwd("~/Documents/Bryan_Docs/Yale/KingLab/Images_Analysis/2016_Full_Lin_Analysis/full_lin_analysis_aug2016/qPCR_excel_data/2016_0203_qPCR_WT_Robert")
read_excel("2016_0203_well_info.xlsx")
read_excel("20160203_132141_CT001112_BAL_QPCR60C -  Melt Curve Summary.xlsx")
read_excel("20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
qpcr_import <- function(xlsx.dir,well.info.file) {
# Constants ---------------------------------------------------------------
# files in the xlsx.dir that will be analyzed
c.file.list <- c("Quantification Summary","End Point Results","Melt Curve Peak Results",
"Quantification Amplification Results","Melt Curve Amplification Results","Melt Curve Derivative Results")
names(c.file.list) <- c("quant.sum","end.points","melt.peaks",
"quant.amp","melt.amp","melt.der")
c.file.type <- ".xlsx"
c.exclude.files <- "^~\\$"
# excepcted columns to find in the user-generated well.info.file .xlsx file:
c.expected.well.info <- c("well","strain","DNA","time","conc","digest","is.std","primers","rep")
# reordering of ALL columns once qp$summary is built
c.summary.col.order <- c("well","fluor","is.empty","is.noDNA","is.std","strain","DNA","time","conc","digest","primers","rep","melt.begin","melt.end","melt.temp","melt.height","end.RFU","Cq")
# initialize the FINAL output, a list called "qp"
qp <- list()
# Find and validate qPCR files --------------------------------------------
# prune off excluded files (temp excel files, etc)
files.all  <- dir(path = xlsx.dir)
files.keep <- files.all[!str_detect(files.all,c.exclude.files)]
# patterns that we will look for in these files:
patterns <- str_c(c.file.list,c.file.type)
names(patterns) <- names(c.file.list) # copy over the same names
# Find which files contain which one of the patterns (makes a matrix that
# is [length(all.files),length(patterns)])
idx.matrix <- outer(files.keep,patterns,str_count)
# verifications (must match ALL patterns exactly 1 time)
if (  any(colSums(idx.matrix) != 1) | any(rowSums(idx.matrix) > 1)  ) {
stop(sprintf("Could not match ALL apporpriate \"%s\" files exactly once in the folder: \n\"%s\"",c.file.type,xlsx.dir))
}
# make a char vector of all the file names in the same order as "c.file.list"
ind.files.keep <- apply(idx.matrix, 2, function(x)which(x==1))
files.qpcr <- files.keep[ind.files.keep]
names(files.qpcr) <- names(ind.files.keep) # copy over the same names
# Read and validate user-generated well info ------------------------------
tmp <- read_excel(str_c(xlsx.dir,well.info.file),sheet = 1)
# verify that ONLY the specified col names are present!
if (  length(setdiff(c.expected.well.info,names(tmp)) != 0)  ) {
stop(sprintf("The column names in \"%s\" must be:\n\"%s\"",well.info.file,str_c(c.expected.well.info,collapse="\",\"")))
}
# this function converts specific columns from "factor" to "numeric"
#   x is a data.frame
#   cols is a list of column names to operate on
# all values that are not numeric in these columns will be coerced
# to NA (for example, "None" will change to NA)
coerce_factor_to_numeric <- function(x,cols) {
idx.not.numeric <- lapply(x,class) == "factor"  &  is.element(names(x),cols)
x[idx.not.numeric] <- suppressWarnings(  sapply(x[idx.not.numeric],function(y) as.numeric(levels(y)[y]))  )
return(x)
}
# use this function to ensure that these columns are numeric:
well.info <- coerce_factor_to_numeric(tmp,c("time","conc"))
# this function will take a "factor", convert to str/num,
# pad with zeros, then convert back to "factor" (useful
# for making sure that sorting works correctly)
pad_zeros_factor <- function(x) {
# split the letter and the numbers into two columns
x.split <- str_extract_all(x,"[^\\d\\s]+|\\d+",simplify=TRUE)
x.split <- as.data.frame(x.split, stringsAsFactors = FALSE)
# second column has number. Pad with zeros:
x.split[,2] <- as.numeric(x.split[,2])      # convert to numeric
x.dig <- floor(log10(max(x.split[,2]))) + 1 # find digits in max value
x.split[,2] <- str_pad(x.split[,2],width=x.dig,pad="0")     # use str_pad to pad with zeros basded on digits
# join the letter and numbers back together
x <- str_c(x.split[,1],x.split[,2])
x <- as.factor(x)
return(x)
}
# use this function to ensure that the well column is padded with zeros:
well.info$well <- pad_zeros_factor(well.info$well)
# coerce the "rep" column to factor
well.info$rep <- as.factor(well.info$rep)
# ensure that these columns are logical:
cols.logical <- c("is.std")
cols.classes <- sapply(well.info[cols.logical],class)
# convert any numeric to logical
for (i in which(cols.classes == "numeric")) {
well.info[,cols.logical[i]] <- as.logical(well.info[,cols.logical[i]])
cols.classes[i] <- "logical"
}
# verify that ALL are now logical
if ( any(cols.classes != "logical") ) {
stop(sprintf("The columns \"%s\" must be logical\n(use \"TRUE\" and \"FALSE\" or 0s and 1s)",str_c(cols,collapse="\",\"")))
}
# make a new column indicating no DNA negative control wells (using %in%
# instead of == effectively ignores NA values!)
well.info$is.noDNA <- well.info$conc %in% 0
# make a new column indicating empty wells (based on the
# presense of all NA values in these columns):
cols.empty <- c("strain","DNA","time","conc","digest","primers","rep")
idx.empty.rows <- apply(well.info[,cols.empty], 1, function(x) all(is.na(x)) )
# replace NA with FALSE for empty rows for logical columns:
well.info[idx.empty.rows,cols.logical] <- FALSE
# make a new column called "is.empty"
well.info$is.empty <- idx.empty.rows
# now, verify that there are NO NA values anywhere in the data.frame
# EXCEPT for in the rows that are empty wells or have no DNA
if ( any(is.na(  well.info[!well.info$is.noDNA & !well.info$is.empty , ]  )) ) {
stop("There cannot be any NA (empty) values in the user-generated well info .xlsx except for totally empty wells")
}
# Read and process qPCR summary data --------------------------------------
# get summary of run information from "quant.sum" (in the 2nd excel sheet!!)
qp$run.info <- read_excel(str_c(xlsx.dir,files.qpcr["quant.sum"]), sheet=2, col_names=FALSE)
# get well, fluor and Cq values from "quant.sum" (in the 1st excel sheet!!)
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["quant.sum"]),sheet=1)
summary.info <- tmp[c("Well","Fluor","Cq")]
# add a column for the end.rfu (from "end.points", 1st excel sheet)
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["end.points"]),sheet=1)
summary.info <- merge(summary.info,tmp[c("Well","End.RFU")])
# add columns related to the melt curve peaks (from "melt.peaks", 1st excel sheet)
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["melt.peaks"]),sheet=1)
summary.info <- merge(summary.info,tmp[c("Well","Melt.Temperature","Peak.Height","Begin.Temperature","End.Temperature")])
# rename all of the columns of this data.frame:
names(summary.info) <- c("well","fluor","Cq","end.RFU","melt.temp","melt.height","melt.begin","melt.end")
# Some columns with strings like "None" have been interpreted as factors
# when actually they should be numeric with "None" replaced with NA.
# Use the function from above to coerce these columns into numeric w/ NA
cols.to.make.numeric <- c("Cq","end.RFU","melt.temp","melt.height","melt.begin","melt.end")
summary.info <- coerce_factor_to_numeric(summary.info,cols.to.make.numeric)
# ensure that there are padded zeros in the "well" column:
summary.info$well <- pad_zeros_factor(summary.info$well)
# merge the well info into the summary data
qp$summary <- merge(well.info,summary.info,by="well")
# re-order values in a way that makes sense:
qp$summary <- qp$summary[c.summary.col.order]
# Read and process raw qPCR data & melt curves ----------------------------
# this function will be used to manipulate all raw qPCR data into data.frames
# massage the data into a long format (just three columns: well, variable, value)
# then merge the data with qp.summary
raw_processing <- function(tmp,cols,summary.info) {
tmp <- tmp[,-1] # drop the empty first column
tmp <- t(tmp)   # transpose to swap rows/cols
# use the first row as the column names
colnames(tmp) <- as.character(tmp[1,])
tmp <- tmp[-1,] # now delete that first row
# add a new column at the left with well labels (row.names)
tmp <- cbind.data.frame(well = row.names(tmp), tmp) # converts to factor
# add padded zeros with the same function from before:
tmp$well <- pad_zeros_factor(tmp$well)
# use the "melt" function from the "reshape2" package to convert
# this from a "wide" dataset to a "long" dataset
tmp <- melt(tmp,id.vars="well")
# convert back to numeric for the middle column (called "variable" now)
tmp$variable <- as.numeric(levels(tmp$variable)[tmp$variable])
# Sort based on well, then variable:
tmp <- tmp[with(tmp, order(well,variable)), ]
rownames(tmp) <- NULL # remove all of the row names
# rename the columns:
colnames(tmp) <- cols
# merge with summary.info:
tmp <- merge(summary.info,tmp,by="well")
# re-order the columns with "well" first, then all the summary
# data, and then the two new columns from this dataset at the end
tmp <- tmp[c(c.summary.col.order,cols[2:3])]
return(tmp)
}
# raw qPCR amplification data
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["quant.amp"]),sheet=1)
qp$cycle <- raw_processing(tmp,c("well","cycle","RFU"),qp$summary)
# raw melt curve amplification data
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["melt.amp"]),sheet=1)
qp$melt <- raw_processing(tmp,c("well","temp","RFU"),qp$summary)
# merge in the raw melt curve derivative data to the same data.frame:
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["melt.der"]),sheet=1)
melt.der <- raw_processing(tmp,c("well","temp","dRFU"),qp$summary)
qp$melt <- merge(qp$melt,melt.der)
# Return the qp list ------------------------------------------------------
return(qp)
}
qpcr_import("./","2016_0203_well_info.xlsx")
qpcr_import("./","2016_0203_well_info.xlsx")
debugSource('~/Documents/Bryan_Docs/Yale/KingLab/qPCR_data/qPCR_analysis_v2.R', echo=TRUE)
qpcr_import("./","2016_0203_well_info.xlsx")
qpcr_import("./","2016_0203_well_info.xlsx")
summary.info
tmp
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["melt.peaks"]),sheet=1)
tmp
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["quant.sum"]),sheet=1)
tmp
files.qpcr
tmp <- read_excel(str_c(xlsx.dir,files.qpcr["end.points"]),sheet=1)
tmp
tmp
z <- data.frame(`abc test` = 1:2)
z
z <- data.frame(`abc\ test` = 1:2)
z
read_excel("20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
z <- read_excel("20160203_132141_CT001112_BAL_QPCR60C -  Quantification Summary.xlsx")
z
names(z)
z <- read_excel("20160203_132141_CT001112_BAL_QPCR60C -  Melt Curve Summary.xlsx")
z
names(z)
class(z)
z
z$Target
z$Well
z$Melt Temp
z$`Melt Temp`
names(z)
z
z$`NA`
z$NA
load("../rdata_files/2016_0226_qp_runs_combined.RData")
load("../rdata_files/2016_0226_qp_runs_combined.RData")
